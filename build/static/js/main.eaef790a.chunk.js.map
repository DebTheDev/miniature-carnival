{"version":3,"sources":["utils/api/index.js","decks/Deck.js","decks/DeckList.js","decks/StudyCardLogic.js","decks/StudyDeck.js","Layout/NotFound.js","Layout/Header.js","decks/EditDeck.js","decks/DisplayDeck.js","cards/CardForm.js","cards/EditCard.js","cards/AddCards.js","decks/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","append","Deck","useState","cardList","setCardList","history","useHistory","useEffect","then","d","find","d2","noOfCards","filter","length","className","description","to","type","title","onClick","window","confirm","go","DeckList","deckList","setDeckList","abortController","AbortController","abort","deckCardList","map","StudyCardLogic","props","validCards","flipped","setFlipped","selectedCard","setSelectedCard","back","nextCard","push","front","StudyDeck","selectedDeck","setSelectedDeck","useParams","aria-label","aria-current","NotFound","Header","EditDeck","handleChange","target","value","onSubmit","event","preventDefault","updateDeck","htmlFor","onChange","DisplayDeck","displayDeck","setDisplayDeck","deleteCardHandler","deleteCard","validCardList","index","class","CardForm","handleSubmit","cardData","placeholder","required","autofocus","EditCard","readCard","updateCard","AddCard","formData","setFormData","createCard","CreateDeck","createDeckHandler","lastDeck","createDeck","Layout","Fragment","path","newDeck","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaef790a.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\n const API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n /**\n  * Defines the default headers for these functions to work with `json-server`\n  */\n const headers = new Headers();\n headers.append(\"Content-Type\", \"application/json\");\n \n /**\n  * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n  *\n  * This function is NOT exported because it is not needed outside of this file.\n  *\n  * @param deck\n  *  the deck instance\n  * @returns {*}\n  *  a copy of the deck instance with the `cards` property removed.\n  */\n function stripCards(deck) {\n   const { cards, ...deckWithoutCards } = deck;\n   return deckWithoutCards;\n }\n \n /**\n  * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n  *\n  * This function is NOT exported because it is not needed outside of this file.\n  *\n  * @param url\n  *  the url for the requst.\n  * @param options\n  *  any options for fetch\n  * @returns {Promise<Error|any>}\n  *  a promise that resolves to the `json` data or an error.\n  *  If the response is not in the 200 - 399 range the promise is rejected.\n  */\n async function fetchJson(url, options) {\n   try {\n     const response = await fetch(url, options);\n     if (response.status < 200 || response.status > 399) {\n       throw new Error(`${response.status} - ${response.statusText}`);\n     }\n     return await response.json();\n   } catch (error) {\n     if (error.name !== \"AbortError\") {\n       throw error;\n     }\n   }\n }\n \n /**\n  * Retrieves all existing decks.\n  * @returns {Promise<[deck]>}\n  *  a promise that resolves to a possibly empty array of decks saved in the database.\n  */\n export async function listDecks(signal) {\n   const url = `${API_BASE_URL}/decks?_embed=cards`;\n   return await fetchJson(url, { signal });\n }\n \n /**\n  * Saves deck to the database (public/data/db.json).\n  * There is no validation done on the deck object, any object will be saved.\n  * @param deck\n  *  the deck to save, which must not have an `id` property\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<deck>}\n  *  a promise that resolves the saved deck, which will now have an `id` property.\n  */\n export async function createDeck(deck, signal) {\n   const url = `${API_BASE_URL}/decks`;\n   const options = {\n     method: \"POST\",\n     headers,\n     body: JSON.stringify(stripCards(deck)),\n     signal,\n   };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Retrieves the deck with the specified `deckId`\n  * @param deckId\n  *  the `id` property matching the desired deck.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<any>}\n  *  a promise that resolves to the saved deck.\n  */\n export async function readDeck(deckId, signal) {\n   const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n   return await fetchJson(url, { signal });\n }\n \n /**\n  * Updates an existing deck\n  * @param updatedDeck\n  *  the deck to save, which must have an `id` property.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the updated deck.\n  */\n export async function updateDeck(updatedDeck, signal) {\n   const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n   const options = {\n     method: \"PUT\",\n     headers,\n     body: JSON.stringify(stripCards(updatedDeck)),\n     signal,\n   };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Deletes the deck with the specified `deckId`.\n  * @param deckId\n  *  the id of the deck to delete\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to an empty object.\n  */\n export async function deleteDeck(deckId, signal) {\n   const url = `${API_BASE_URL}/decks/${deckId}`;\n   const options = { method: \"DELETE\", signal };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Retrieves all cards associated with the specified `deckId`.\n  * @param deckId\n  *  the id of the target deck\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to a possible empty array of cards.\n  */\n export async function listCards(deckId, signal) {\n   const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n   return await fetchJson(url, { signal });\n }\n \n /**\n  * Creates a new card associated with the specified `deckId`.\n  * There is no validation that there is an existing deck with the specified `deckId`.\n  * @param deckId\n  *  the id of the target deck\n  * @param card\n  *  the card to create, which must not have an `id` property\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the new card, which will have an `id` property.\n  */\n export async function createCard(deckId, card, signal) {\n   // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n   // and the card is not related to the deck because the data types of the ID's are different.\n   const url = `${API_BASE_URL}/cards`;\n   card.deckId = Number(deckId);\n   const options = {\n     method: \"POST\",\n     headers,\n     body: JSON.stringify(card),\n     signal,\n   };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Retrieves the card with the specified `cardId`\n  * @param cardId\n  *  the id of the target\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the saved card.\n  */\n export async function readCard(cardId, signal) {\n   const url = `${API_BASE_URL}/cards/${cardId}`;\n   return await fetchJson(url, { signal });\n }\n \n /**\n  * Updates an existing deck\n  * @param updatedCard\n  *  the card to save, which must have an `id` property.\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to the updated card.\n  */\n export async function updateCard(updatedCard, signal) {\n   const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n   const options = {\n     method: \"PUT\",\n     headers,\n     body: JSON.stringify(updatedCard),\n   };\n   return await fetchJson(url, options);\n }\n \n /**\n  * Deletes the card with the specified `cardId`.\n  * @param cardId\n  *  the id of the card to delete\n  * @param signal\n  *  optional AbortController.signal\n  * @returns {Promise<Error|*>}\n  *  a promise that resolves to an empty object.\n  */\n export async function deleteCard(cardId, signal) {\n   const url = `${API_BASE_URL}/cards/${cardId}`;\n   const options = { method: \"DELETE\", signal };\n   return await fetchJson(url, options);\n }\n ","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nimport { listDecks, deleteDeck } from '../utils/api'\r\n\r\nexport default function Deck({ deck }) {\r\n  const [cardList, setCardList] = useState([])\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    listDecks().then((d) => {\r\n      const cards = d.find((d2) => d2.id === deck.id).cards\r\n      setCardList(cards)\r\n    })\r\n  }, [deck.id])\r\n\r\n  function deleteHandler(value) {\r\n    deleteDeck(value)\r\n    history.go(0)\r\n  }\r\n\r\n  const noOfCards = cardList && cardList.filter((card) => !card.cards).length\r\n\r\n  return (\r\n    <div className='card m-1'>\r\n      <div className='card-body'>\r\n        <div className='d-flex w-100 justify-content-between'>\r\n          <h5 className='card-title'>{deck.name}</h5>\r\n          <p className='text-muted'>{`${noOfCards} cards`}</p>\r\n        </div>\r\n        <p className='card-text'>{deck.description}</p>\r\n        <div className='buttons d-flex'>\r\n          <Link\r\n            to={`/decks/${deck.id}`}\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            <i className='fas fa-eye'></i> View\r\n          </Link>\r\n          <Link\r\n            to={`/decks/${deck.id}/study`}\r\n            type='button'\r\n            className='btn btn-primary'\r\n          >\r\n            <i className='fas fa-book'></i> Study\r\n          </Link>\r\n          <button\r\n            type='button'\r\n            className='btn btn-danger ml-auto'\r\n            title='Delete'\r\n            onClick={() => {\r\n              if (window.confirm('Delete this deck?')) {\r\n                deleteHandler(deck.id, cardList)\r\n              }\r\n            }}\r\n          >\r\n            <i className='fas fa-trash-alt'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { listDecks } from '../utils/api'\r\nimport Deck from './Deck'\r\n\r\nexport default function DeckList({ deckList, setDeckList }) {\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n\r\n    listDecks(abortController.signal).then(setDeckList)\r\n\r\n    return () => abortController.abort()\r\n  }, [setDeckList])\r\n\r\n  const deckCardList =\r\n    deckList && deckList.map((deck) => <Deck key={deck.id} deck={deck} />)\r\n\r\n  return (\r\n    <main className='container mb-3'>\r\n      <Link to='decks/new'>\r\n        <button type='button' className='btn btn-secondary btn-lg m-1'>\r\n          <i className='fas fa-plus'></i> Create Deck\r\n        </button>\r\n      </Link>\r\n      <section className='column'>{deckCardList}</section>\r\n    </main>\r\n  )\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function StudyCardLogic(props) {\r\n  const { validCards } = props\r\n  const history = useHistory()\r\n  const [flipped, setFlipped] = useState(false)\r\n  const [selectedCard, setSelectedCard] = useState(0)\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>\r\n          {'Card ' + Number(selectedCard + 1) + ' of ' + validCards.length}\r\n        </h5>\r\n        {!flipped ? (\r\n          <Fragment>\r\n            <p className='card-text'>{validCards[selectedCard].front}</p>\r\n            <button\r\n              type='button'\r\n              className='btn btn-secondary'\r\n              onClick={() => setFlipped(true)}\r\n            >\r\n              Flip\r\n            </button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <p className='card-text'>{validCards[selectedCard].back}</p>\r\n            <button\r\n              type='button'\r\n              className='btn btn-secondary mr-2'\r\n              onClick={() => setFlipped(false)}\r\n            >\r\n              Flip\r\n            </button>\r\n            <button\r\n              type='button'\r\n              className='btn btn-primary'\r\n              onClick={() => {\r\n                const nextCard = selectedCard + 1\r\n                if (validCards[nextCard]) {\r\n                  setSelectedCard(nextCard)\r\n                  setFlipped(false)\r\n                } else if (window.confirm('Restart Cards?')) {\r\n                  setSelectedCard(0)\r\n                  setFlipped(false)\r\n                } else {\r\n                  history.push('/')\r\n                }\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState, Fragment } from 'react'\r\nimport { useParams, Link } from 'react-router-dom'\r\n\r\nimport { readDeck } from '../utils/api'\r\nimport StudyCardLogic from './StudyCardLogic'\r\n\r\nexport default function StudyDeck({ selectedDeck, setSelectedDeck }) {\r\n  const [cardList, setCardList] = useState([])\r\n  const { deckId } = useParams()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck)\r\n      setCardList(deck.cards)\r\n    })\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId, setSelectedDeck])\r\n\r\n  const validCards = cardList && cardList.filter((card) => !card.cards)\r\n\r\n  return (\r\n    <Fragment>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{'Study: ' + selectedDeck.name}</h1>\r\n      {cardList.length > 0 && validCards.length > 2 ? (\r\n        <StudyCardLogic validCards={validCards} />\r\n      ) : (\r\n        <Fragment>\r\n          <h3>Not enough cards.</h3>\r\n          <p>\r\n            {'You need at least 3 cards to study. There are ' +\r\n              validCards.length +\r\n              ' cards in the deck.'}\r\n          </p>\r\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\r\n            <button type='button' className='btn btn-primary'>\r\n              <i className='fas fa-plus'></i> Add Cards\r\n            </button>\r\n          </Link>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header className='jumbotron bg-dark'>\n\t\t\t<div className='container text-white'>\n\t\t\t\t<h1 className='display-4'>Flashcard-o-matic</h1>\n\t\t\t\t<p className='lead'>Discover The Flashcard Difference.</p>\n\t\t\t</div>\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React, { useEffect } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, updateDeck } from '../utils/api'\r\n\r\nexport default function EditDeck({ selectedDeck, setSelectedDeck }) {\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId, setSelectedDeck])\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedDeck({\r\n      ...selectedDeck,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    updateDeck(selectedDeck)\r\n    history.push(`/decks/${deckId}`)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Edit Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <textarea\r\n            className='form-control'\r\n            id='name'\r\n            type='text'\r\n            name='name'\r\n            onChange={handleChange}\r\n            value={selectedDeck.name}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Description</label>\r\n          <textarea\r\n            className='form-control'\r\n            id='description'\r\n            type='text'\r\n            name='description'\r\n            onChange={handleChange}\r\n            value={selectedDeck.description}\r\n          />\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <Link\r\n            to={`/decks/${selectedDeck.id}`}\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            Cancel\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck, deleteCard } from \"../utils/api\";\r\n// import {\r\n//   EyeFill,\r\n//   JournalBookmarkFill,\r\n//   TrashFill,\r\n//   PlusCircleFill,\r\n// } from \"react-bootstrap-icons\";\r\n\r\nexport default function DisplayDeck() {\r\n  const [displayDeck, setDisplayDeck] = useState([]);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDisplayDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const cardList = displayDeck && displayDeck.cards;\r\n  const validCards = cardList && cardList.filter((card) => !card.cards);\r\n\r\n  function deleteDeckHandler(deck) {\r\n    deleteDeck(deck.id);\r\n    history.push(\"/\");\r\n    history.go(0);\r\n  }\r\n\r\n  function deleteCardHandler(card) {\r\n    const id = card.id;\r\n    deleteCard(id);\r\n    history.go(0);\r\n  }\r\n\r\n  const validCardList =\r\n    validCards &&\r\n    validCards.map((card, index) => (\r\n      <div className=\"card\" key={index}>\r\n        <div className=\"card-body row\">\r\n          <div className=\"col-6\">\r\n            <p className=\"text-muted\">{card.front}</p>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <p className=\"text-muted\">{card.back}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"ml-auto\">\r\n            {/* Edit Card */}\r\n            <Link to={`/decks/${displayDeck.id}/cards/${card.id}/edit`}>\r\n              <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n                <i className=\"fas fa-pencil-alt\"></i> Edit\r\n              </button>\r\n            </Link>\r\n            {/* Delete Card */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              title=\"Delete\"\r\n              onClick={() => {\r\n                if (window.confirm(\"Delete this card?\"))\r\n                  deleteCardHandler(card);\r\n              }}\r\n            >\r\n              <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <i className=\"fas fa-home\"></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            {displayDeck.name}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <div>\r\n        <h3>{displayDeck.name}</h3>\r\n        <p>{displayDeck.description}</p>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {/* Edit Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/edit`}>\r\n          <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n            <i className=\"fas fa-pencil-alt\"></i> Edit\r\n          </button>\r\n        </Link>\r\n        {/* Study Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/study`}>\r\n          <button type=\"button\" className=\"btn btn-primary mr-2\">\r\n            <i className=\"fas fa-book\"></i> Study\r\n          </button>\r\n        </Link>\r\n        {/* Add Cards */}\r\n        <Link to={`/decks/${displayDeck.id}/cards/new`}>\r\n          <button type=\"button\" className=\"btn btn-primary\">\r\n            <i className=\"fas fa-plus\"></i> Add Cards\r\n          </button>\r\n        </Link>\r\n        {/* Delete Deck */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger ml-auto\"\r\n          title=\"Delete\"\r\n          onClick={() => {\r\n            if (window.confirm(\"Delete this deck?\"))\r\n              deleteDeckHandler(displayDeck, cardList);\r\n          }}\r\n        >\r\n         <i class=\"bi bi-trash-fill\"></i>\r\n        </button>\r\n      </div>\r\n      <br />\r\n      <div className=\"mb-3\">\r\n        <h2>Cards</h2>\r\n        <section className=\"column\">{validCardList}</section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function CardForm({\r\n  handleChange,\r\n  handleSubmit,\r\n  cardData,\r\n  selectedDeck,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className='form-group'>\r\n        <label htmlFor='name'>Front</label>\r\n        <textarea\r\n          className='form-control'\r\n          name='front'\r\n          id='front'\r\n          placeholder='Front side of card'\r\n          onChange={handleChange}\r\n          value={cardData.front}\r\n          required='true'\r\n          autofocus='true'\r\n        />\r\n      </div>\r\n      <div className='form-group'>\r\n        <label htmlFor='description'>Back</label>\r\n        <textarea\r\n          className='form-control'\r\n          name='back'\r\n          id='back'\r\n          placeholder='Back side of card'\r\n          onChange={handleChange}\r\n          value={cardData.back}\r\n          required='true'\r\n        />\r\n      </div>\r\n      <div className='buttons mb-3'>\r\n        <Link\r\n          to={`/decks/${selectedDeck.id}`}\r\n          className='btn btn-secondary mr-2'\r\n        >\r\n          Done\r\n        </Link>\r\n        <button type='submit' className='btn btn-primary'>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readCard, readDeck, updateCard } from '../utils/api'\r\nimport CardForm from './CardForm'\r\n\r\nexport default function EditCard({ selectedDeck, setSelectedDeck }) {\r\n  const history = useHistory()\r\n  const [selectedCard, setSelectedCard] = useState([])\r\n  const { deckId, cardId } = useParams()\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck)\r\n      readCard(cardId, abortController.signal).then(setSelectedCard)\r\n    })\r\n  }, [deckId, cardId, setSelectedDeck])\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedCard({\r\n      ...selectedCard,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    updateCard(selectedCard)\r\n    history.push(`/decks/${selectedDeck.id}`)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            {'Edit Card ' + cardId}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>Edit Card</h3>\r\n      <CardForm\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        cardData={selectedCard}\r\n        selectedDeck={selectedDeck}\r\n      />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, createCard } from '../utils/api'\r\nimport CardForm from './CardForm'\r\n\r\nexport function AddCard({ selectedDeck, setSelectedDeck }) {\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId, setSelectedDeck])\r\n\r\n  const initialState = {\r\n    front: '',\r\n    back: '',\r\n  }\r\n\r\n  const [formData, setFormData] = useState({ ...initialState })\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    createCard(deckId, formData)\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>{selectedDeck.name + ': Add Card'}</h3>\r\n      <CardForm\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        cardData={formData}\r\n        selectedDeck={selectedDeck}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport const numberFive = 5","import React, { useState } from 'react'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { createDeck } from '../utils/api/index'\r\n\r\nexport default function CreateDeck({ deckList, createDeckHandler }) {\r\n  const history = useHistory()\r\n\r\n  const initialState = {\r\n    name: '',\r\n    description: '',\r\n  }\r\n\r\n  let lastDeck = deckList[deckList.length - 1]\r\n\r\n  const [formData, setFormData] = useState({ ...initialState })\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const response = createDeck(formData)\r\n    createDeckHandler(response)\r\n    history.push(`/decks/${lastDeck.id + 1}`)\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Create Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1> Create Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <input\r\n            className='form-control'\r\n            id='name'\r\n            type='text'\r\n            name='name'\r\n            placeholder='Deck Name'\r\n            onChange={handleChange}\r\n            value={formData.name}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Description</label>\r\n\r\n          <textarea\r\n            className='form-control'\r\n            id='description'\r\n            type='text'\r\n            name='description'\r\n            placeholder='Brief description of the deck'\r\n            onChange={handleChange}\r\n            value={formData.description}\r\n          />\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <button\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n            onClick={() => history.push('/')}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React, { useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Home from \"../decks/DeckList\";\nimport StudyDeck from \"../decks/StudyDeck\";\nimport NotFound from \"./NotFound\";\nimport Header from \"./Header\";\nimport EditDeck from \"../decks/EditDeck\";\nimport DisplayDeck from \"../decks/DisplayDeck\";\nimport EditCard from \"../cards/EditCard\";\nimport { AddCard } from \"../cards/AddCards\";\nimport CreateDeck from \"../decks/CreateDeck\";\n\n\nfunction Layout() {\n  const [deckList, setDeckList] = useState([]);\n  const [selectedDeck, setSelectedDeck] = useState([]);\n\n  const createDeckHandler = (newDeck) => {\n    setDeckList([...deckList, newDeck]);\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/decks/new\">\n            <CreateDeck\n              deckList={deckList}\n              createDeckHandler={createDeckHandler}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyDeck\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route exact={true} path=\"/decks/:deckId\">\n            <DisplayDeck />\n          </Route>\n          <Route exact={true} path=\"/decks\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact={true} path=\"/\">\n            <Home deckList={deckList} setDeckList={setDeckList} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}